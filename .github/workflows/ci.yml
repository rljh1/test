name: CI Workflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    services:
      # Define the PostgreSQL service for SonarQube
      postgres:
        image: postgres:12
        env:
          POSTGRES_USER: sonar
          POSTGRES_PASSWORD: sonar
          POSTGRES_DB: sonar
        ports:
          - 5432:5432
        options: --health-cmd="pg_isready -U sonar" --health-timeout=5s --health-retries=3

    steps:
      # Checkout the repository to the GitHub runner
      - name: Checkout code
        uses: actions/checkout@v2

      # Set up Python environment
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      # Install dependencies
      - name: Install Python dependencies
        run: |
          pip install -r flask_app/requirements.txt
          pip install safety pytest selenium

      # Run dependency check using Safety
      - name: Run dependency check (Safety)
        run: |
          safety check --full-report

      # Run integration tests with pytest
      - name: Run integration tests with pytest
        run: |
          pytest --maxfail=1 --disable-warnings -q

      # Install Node.js and ESLint with security plugin
      - name: Set up Node.js and ESLint with security plugin
        run: |
          # Install Node.js
          curl -sL https://deb.nodesource.com/setup_16.x | sudo -E bash -
          sudo apt-get install -y nodejs
          
          # Install ESLint and eslint-plugin-security
          npm install eslint eslint-plugin-security

      # Run ESLint to check for security vulnerabilities
      - name: Run ESLint security scan
        run: |
          # Initialize ESLint (if necessary) and run the security scan
          npx eslint --plugin security --rule "security/detect-object-injection: error" . --ext .js,.jsx,.ts,.tsx

      # Start Flask app in the background
      - name: Start Flask app
        run: |
          nohup flask run --host=0.0.0.0 --port=5000 &

      # Wait for Flask to be ready (check with curl)
      - name: Wait for Flask app to be ready
        run: |
          # Wait for the Flask server to be up and running (check if it's accessible)
          for i in {1..30}; do
            curl -s http://localhost:5000 && break || sleep 5;
          done

      # Run UI tests with Selenium (assumes you have UI tests in 'tests/ui_tests')
      - name: Run UI tests with Selenium
        run: |
          python -m unittest discover -s tests/ui_tests

      # Start SonarQube Analysis
      - name: Run SonarQube scan
        run: |
          docker run --rm \
            -e SONAR_HOST_URL="http://localhost:9000" \
            -e SONAR_LOGIN="admin" \
            -e SONAR_PASSWORD="2301837@sit.singaporetech.edu.sg" \
            -v $(pwd):/usr/src \
            sonarsource/sonar-scanner-cli

      # Commit changes to local Git repo inside Docker container
      - name: Commit changes to local Git repo inside Docker container
        run: |
          docker exec -T git-server git add .  # Add all changes to git
          docker exec -T git-server git commit -m "CI: Update repository with tests and changes"  # Commit
          docker exec -T git-server git push  # Push changes to the local git repo

      # Push changes to GitHub (optional step)
      - name: Push changes to GitHub
        run: |
          git push origin main
